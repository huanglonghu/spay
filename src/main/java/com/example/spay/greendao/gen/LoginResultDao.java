package com.example.spay.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.spay.greendao.entity.LoginResult;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "LOGIN_RESULT".
*/
public class LoginResultDao extends AbstractDao<LoginResult, Void> {

    public static final String TABLENAME = "LOGIN_RESULT";

    /**
     * Properties of entity LoginResult.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property UniquenessToken = new Property(0, String.class, "uniquenessToken", false, "UNIQUENESS_TOKEN");
        public final static Property PayUrl = new Property(1, String.class, "payUrl", false, "PAY_URL");
        public final static Property UserId = new Property(2, int.class, "userId", false, "USER_ID");
    }


    public LoginResultDao(DaoConfig config) {
        super(config);
    }
    
    public LoginResultDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"LOGIN_RESULT\" (" + //
                "\"UNIQUENESS_TOKEN\" TEXT," + // 0: uniquenessToken
                "\"PAY_URL\" TEXT," + // 1: payUrl
                "\"USER_ID\" INTEGER NOT NULL );"); // 2: userId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LOGIN_RESULT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, LoginResult entity) {
        stmt.clearBindings();
 
        String uniquenessToken = entity.getUniquenessToken();
        if (uniquenessToken != null) {
            stmt.bindString(1, uniquenessToken);
        }
 
        String payUrl = entity.getPayUrl();
        if (payUrl != null) {
            stmt.bindString(2, payUrl);
        }
        stmt.bindLong(3, entity.getUserId());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, LoginResult entity) {
        stmt.clearBindings();
 
        String uniquenessToken = entity.getUniquenessToken();
        if (uniquenessToken != null) {
            stmt.bindString(1, uniquenessToken);
        }
 
        String payUrl = entity.getPayUrl();
        if (payUrl != null) {
            stmt.bindString(2, payUrl);
        }
        stmt.bindLong(3, entity.getUserId());
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public LoginResult readEntity(Cursor cursor, int offset) {
        LoginResult entity = new LoginResult( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // uniquenessToken
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // payUrl
            cursor.getInt(offset + 2) // userId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, LoginResult entity, int offset) {
        entity.setUniquenessToken(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setPayUrl(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUserId(cursor.getInt(offset + 2));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(LoginResult entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(LoginResult entity) {
        return null;
    }

    @Override
    public boolean hasKey(LoginResult entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
