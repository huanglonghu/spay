package com.example.spay.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.spay.greendao.entity.Province;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "T_Province".
*/
public class ProvinceDao extends AbstractDao<Province, Void> {

    public static final String TABLENAME = "T_Province";

    /**
     * Properties of entity Province.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ProSort = new Property(0, int.class, "proSort", false, "ProSort");
        public final static Property ProName = new Property(1, String.class, "proName", false, "ProName");
        public final static Property ProRemark = new Property(2, String.class, "proRemark", false, "ProRemark");
    }


    public ProvinceDao(DaoConfig config) {
        super(config);
    }
    
    public ProvinceDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Province entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getProSort());
 
        String proName = entity.getProName();
        if (proName != null) {
            stmt.bindString(2, proName);
        }
 
        String proRemark = entity.getProRemark();
        if (proRemark != null) {
            stmt.bindString(3, proRemark);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Province entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getProSort());
 
        String proName = entity.getProName();
        if (proName != null) {
            stmt.bindString(2, proName);
        }
 
        String proRemark = entity.getProRemark();
        if (proRemark != null) {
            stmt.bindString(3, proRemark);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public Province readEntity(Cursor cursor, int offset) {
        Province entity = new Province( //
            cursor.getInt(offset + 0), // proSort
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // proName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) // proRemark
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Province entity, int offset) {
        entity.setProSort(cursor.getInt(offset + 0));
        entity.setProName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setProRemark(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(Province entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(Province entity) {
        return null;
    }

    @Override
    public boolean hasKey(Province entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
